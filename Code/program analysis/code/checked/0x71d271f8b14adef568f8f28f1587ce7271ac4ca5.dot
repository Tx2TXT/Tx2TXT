digraph "graph.cfg.gv" {
	subgraph global {
		node [fontname=Courier fontsize=30.0 rank=same shape=box]
		block_0 [label="0: %00 = #0x60\l2: %01 = #0x40\l4: MSTORE(%01, %00)\l5: %02 = #0x4\l7: %03 = CALLDATASIZE()\l8: %04 = LT(%03, %02)\l9: %05 = #0x3D\lc: JUMPI(%05, %04)\l"]
		block_d [label="d: %06 = #0xFFFFFFFF\l12: %07 = #0xE0\l14: %08 = #0x2\l16: %09 = EXP(%08, %07)\l17: %0A = #0x0\l19: %0B = CALLDATALOAD(%0A)\l1a: %0C = DIV(%0B, %09)\l1b: %0D = AND(%0C, %06)\l1c: %0E = #0x19449CB2\l21: %0F = DUP2(%0D)\l22: %10 = EQ(%0D, %0E)\l23: %11 = #0x42\l26: JUMPI(%11, %10)\l"]
		block_27 [label="27: %12 = DUP1(%0D)\l28: %13 = #0xA6F9DAE1\l2d: %14 = EQ(%13, %0D)\l2e: %15 = #0x63\l31: JUMPI(%15, %14)\l"]
		block_32 [label="32: %16 = DUP1(%0D)\l33: %17 = #0xCBF9B84B\l38: %18 = EQ(%17, %0D)\l39: %19 = #0x82\l3c: JUMPI(%19, %18)\l"]
		block_3d [label="3d: JUMPDEST()\l3e: %E2 = #0x0\l40: %E3 = DUP1(%E2)\l41: REVERT(%E2, %E2)\l"]
		block_42 [label="42: JUMPDEST()\l43: %B7 = CALLVALUE()\l44: %B8 = ISZERO(%B7)\l45: %B9 = #0x4D\l48: JUMPI(%B9, %B8)\l"]
		block_49 [label="49: %BA = #0x0\l4b: %BB = DUP1(%BA)\l4c: REVERT(%BA, %BA)\l"]
		block_4d [label="4d: JUMPDEST()\l4e: %BC = #0x61\l51: %BD = #0x1\l53: %BE = #0xA0\l55: %BF = #0x2\l57: %C0 = EXP(%BF, %BE)\l58: %C1 = SUB(%C0, %BD)\l59: %C2 = #0x4\l5b: %C3 = CALLDATALOAD(%C2)\l5c: %C4 = AND(%C3, %C1)\l5d: %C5 = #0xB8\l60: JUMP(%C5)\l"]
		block_61 [label="61: JUMPDEST()\l62: STOP()\l"]
		block_63 [label="63: JUMPDEST()\l64: %8C = CALLVALUE()\l65: %8D = ISZERO(%8C)\l66: %8E = #0x6E\l69: JUMPI(%8E, %8D)\l"]
		block_6a [label="6a: %8F = #0x0\l6c: %90 = DUP1(%8F)\l6d: REVERT(%8F, %8F)\l"]
		block_6e [label="6e: JUMPDEST()\l6f: %91 = #0x61\l72: %92 = #0x1\l74: %93 = #0xA0\l76: %94 = #0x2\l78: %95 = EXP(%94, %93)\l79: %96 = SUB(%95, %92)\l7a: %97 = #0x4\l7c: %98 = CALLDATALOAD(%97)\l7d: %99 = AND(%98, %96)\l7e: %9A = #0x102\l81: JUMP(%9A)\l"]
		block_82 [label="82: JUMPDEST()\l83: %1C = CALLVALUE()\l84: %1D = ISZERO(%1C)\l85: %1E = #0x8D\l88: JUMPI(%1E, %1D)\l"]
		block_89 [label="89: %1F = #0x0\l8b: %20 = DUP1(%1F)\l8c: REVERT(%1F, %1F)\l"]
		block_8d [label="8d: JUMPDEST()\l8e: %21 = #0xA4\l91: %22 = #0x4\l93: %23 = CALLDATALOAD(%22)\l94: %24 = #0x1\l96: %25 = #0xA0\l98: %26 = #0x2\l9a: %27 = EXP(%26, %25)\l9b: %28 = SUB(%27, %24)\l9c: %29 = #0x24\l9e: %2A = CALLDATALOAD(%29)\l9f: %2B = AND(%2A, %28)\la0: %2C = #0x14C\la3: JUMP(%2C)\l"]
		block_a4 [label="a4: JUMPDEST()\la5: %81 = #0x40\la7: %82 = MLOAD(%81)\la8: SWAP1(%80)\la9: %83 = ISZERO(%80)\laa: %84 = ISZERO(%83)\lab: %85 = DUP2(%82)\lac: MSTORE(%82, %84)\lad: %86 = #0x20\laf: %87 = ADD(%86, %82)\lb0: %88 = #0x40\lb2: %89 = MLOAD(%88)\lb3: %8A = DUP1(%89)\lb4: SWAP2(%87)\lb5: %8B = SUB(%87, %89)\lb6: SWAP1(%89)\lb7: RETURN(%89, %8B)\l"]
		block_b8 [label="b8: JUMPDEST()\lb9: %C6 = #0x0\lbb: %C7 = SLOAD(%C6)\lbc: %C8 = CALLER()\lbd: %C9 = #0x1\lbf: %CA = #0xA0\lc1: %CB = #0x2\lc3: %CC = EXP(%CB, %CA)\lc4: %CD = SUB(%CC, %C9)\lc5: SWAP1(%C8)\lc6: %CE = DUP2(%CD)\lc7: %CF = AND(%CD, %C8)\lc8: SWAP2(%C7)\lc9: %D0 = AND(%C7, %CD)\lca: %D1 = EQ(%D0, %CF)\lcb: %D2 = #0xD3\lce: JUMPI(%D2, %D1)\l"]
		block_cf [label="cf: %D3 = #0x0\ld1: %D4 = DUP1(%D3)\ld2: REVERT(%D3, %D3)\l"]
		block_d3 [label="d3: JUMPDEST()\ld4: %D5 = #0x1\ld6: %D6 = DUP1(%D5)\ld7: %D7 = SLOAD(%D5)\ld8: %D8 = #0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\led: %D9 = NOT(%D8)\lee: %DA = AND(%D9, %D7)\lef: %DB = #0x1\lf1: %DC = #0xA0\lf3: %DD = #0x2\lf5: %DE = EXP(%DD, %DC)\lf6: %DF = SUB(%DE, %DB)\lf7: SWAP3(%C4)\lf8: SWAP1(%DA)\lf9: SWAP3(%DF)\lfa: %E0 = AND(%DF, %C4)\lfb: SWAP2(%DA)\lfc: SWAP1(%D5)\lfd: SWAP2(%E0)\lfe: %E1 = OR(%E0, %DA)\lff: SWAP1(%D5)\l100: SSTORE(%D5, %E1)\l101: JUMP(%BC)\l"]
		block_102 [label="102: JUMPDEST()\l103: %9B = #0x0\l105: %9C = SLOAD(%9B)\l106: %9D = CALLER()\l107: %9E = #0x1\l109: %9F = #0xA0\l10b: %A0 = #0x2\l10d: %A1 = EXP(%A0, %9F)\l10e: %A2 = SUB(%A1, %9E)\l10f: SWAP1(%9D)\l110: %A3 = DUP2(%A2)\l111: %A4 = AND(%A2, %9D)\l112: SWAP2(%9C)\l113: %A5 = AND(%9C, %A2)\l114: %A6 = EQ(%A5, %A4)\l115: %A7 = #0x11D\l118: JUMPI(%A7, %A6)\l"]
		block_119 [label="119: %A8 = #0x0\l11b: %A9 = DUP1(%A8)\l11c: REVERT(%A8, %A8)\l"]
		block_11d [label="11d: JUMPDEST()\l11e: %AA = #0x0\l120: %AB = DUP1(%AA)\l121: %AC = SLOAD(%AA)\l122: %AD = #0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\l137: %AE = NOT(%AD)\l138: %AF = AND(%AE, %AC)\l139: %B0 = #0x1\l13b: %B1 = #0xA0\l13d: %B2 = #0x2\l13f: %B3 = EXP(%B2, %B1)\l140: %B4 = SUB(%B3, %B0)\l141: SWAP3(%99)\l142: SWAP1(%AF)\l143: SWAP3(%B4)\l144: %B5 = AND(%B4, %99)\l145: SWAP2(%AF)\l146: SWAP1(%AA)\l147: SWAP2(%B5)\l148: %B6 = OR(%B5, %AF)\l149: SWAP1(%AA)\l14a: SSTORE(%AA, %B6)\l14b: JUMP(%91)\l"]
		block_14c [label="14c: JUMPDEST()\l14d: %2D = #0x1\l14f: %2E = SLOAD(%2D)\l150: %2F = #0x0\l152: SWAP1(%2E)\l153: %30 = CALLER()\l154: %31 = #0x1\l156: %32 = #0xA0\l158: %33 = #0x2\l15a: %34 = EXP(%33, %32)\l15b: %35 = SUB(%34, %31)\l15c: SWAP1(%30)\l15d: %36 = DUP2(%35)\l15e: %37 = AND(%35, %30)\l15f: SWAP2(%2E)\l160: %38 = AND(%2E, %35)\l161: %39 = EQ(%38, %37)\l162: %3A = #0x16A\l165: JUMPI(%3A, %39)\l"]
		block_166 [label="166: %3B = #0x0\l168: %3C = DUP1(%3B)\l169: REVERT(%3B, %3B)\l"]
		block_16a [label="16a: JUMPDEST()\l16b: %3D = DUP2(%2B)\l16c: %3E = #0x1\l16e: %3F = #0xA0\l170: %40 = #0x2\l172: %41 = EXP(%40, %3F)\l173: %42 = SUB(%41, %3E)\l174: %43 = AND(%42, %2B)\l175: %44 = #0x40\l177: %45 = MLOAD(%44)\l178: %46 = #0x7472616E7366657228616464726573732C75696E743235362900000000000000\l199: %47 = DUP2(%45)\l19a: MSTORE(%45, %46)\l19b: %48 = #0x19\l19d: %49 = ADD(%48, %45)\l19e: %4A = #0x40\l1a0: %4B = MLOAD(%4A)\l1a1: SWAP1(%49)\l1a2: %4C = DUP2(%4B)\l1a3: SWAP1(%49)\l1a4: %4D = SUB(%49, %4B)\l1a5: SWAP1(%4B)\l1a6: %4E = SHA3(%4B, %4D)\l1a7: %4F = #0x1\l1a9: %50 = SLOAD(%4F)\l1aa: %51 = #0xE0\l1ac: %52 = #0x2\l1ae: %53 = EXP(%52, %51)\l1af: SWAP1(%50)\l1b0: SWAP2(%4E)\l1b1: %54 = DIV(%4E, %53)\l1b2: SWAP1(%50)\l1b3: %55 = #0x1\l1b5: %56 = #0xA0\l1b7: %57 = #0x2\l1b9: %58 = EXP(%57, %56)\l1ba: %59 = SUB(%58, %55)\l1bb: %5A = AND(%59, %50)\l1bc: %5B = DUP6(%23)\l1bd: %5C = #0x40\l1bf: %5D = MLOAD(%5C)\l1c0: %5E = #0xE0\l1c2: %5F = #0x2\l1c4: %60 = EXP(%5F, %5E)\l1c5: %61 = #0xFFFFFFFF\l1ca: %62 = DUP6(%54)\l1cb: %63 = AND(%54, %61)\l1cc: %64 = MUL(%63, %60)\l1cd: %65 = DUP2(%5D)\l1ce: MSTORE(%5D, %64)\l1cf: %66 = #0x1\l1d1: %67 = #0xA0\l1d3: %68 = #0x2\l1d5: %69 = EXP(%68, %67)\l1d6: %6A = SUB(%69, %66)\l1d7: SWAP1(%5D)\l1d8: SWAP3(%5A)\l1d9: %6B = AND(%5A, %6A)\l1da: %6C = #0x4\l1dc: %6D = DUP4(%5D)\l1dd: %6E = ADD(%5D, %6C)\l1de: MSTORE(%6E, %6B)\l1df: %6F = #0x24\l1e1: %70 = DUP3(%5D)\l1e2: %71 = ADD(%5D, %6F)\l1e3: MSTORE(%71, %23)\l1e4: %72 = #0x44\l1e6: %73 = ADD(%72, %5D)\l1e7: %74 = #0x0\l1e9: %75 = #0x40\l1eb: %76 = MLOAD(%75)\l1ec: %77 = DUP1(%76)\l1ed: %78 = DUP4(%73)\l1ee: %79 = SUB(%73, %76)\l1ef: %7A = DUP2(%76)\l1f0: %7B = #0x0\l1f2: %7C = DUP8(%43)\l1f3: %7D = #0x646E\l1f6: %7E = GAS()\l1f7: %7F = SUB(%7E, %7D)\l1f8: %80 = CALL(%7F, %43, %7B, %76, %79, %76, %74)\l1f9: SWAP7(%21)\l1fa: SWAP6(%23)\l1fb: POP()\l1fc: POP()\l1fd: POP()\l1fe: POP()\l1ff: POP()\l200: POP()\l201: JUMP(%21)\l"]
		block_202 [label="202: [NO_SSA] STOP\l"]
	}
	block_11d -> block_61 [color=blue]
	block_27 -> block_32 [color=red]
	block_0 -> block_3d [color=green]
	block_6e -> block_102 [color=blue]
	block_42 -> block_4d [color=green]
	block_0 -> block_d [color=red]
	block_32 -> block_82 [color=green]
	block_102 -> block_11d [color=green]
	block_42 -> block_49 [color=red]
	block_14c -> block_16a [color=green]
	block_b8 -> block_cf [color=red]
	block_b8 -> block_d3 [color=green]
	block_14c -> block_166 [color=red]
	block_82 -> block_89 [color=red]
	block_82 -> block_8d [color=green]
	block_27 -> block_63 [color=green]
	block_32 -> block_3d [color=red]
	block_d3 -> block_61 [color=blue]
	block_8d -> block_14c [color=blue]
	block_d -> block_27 [color=red]
	block_16a -> block_a4 [color=blue]
	block_102 -> block_119 [color=red]
	block_d -> block_42 [color=green]
	block_63 -> block_6a [color=red]
	block_63 -> block_6e [color=green]
	block_4d -> block_b8 [color=blue]
}
