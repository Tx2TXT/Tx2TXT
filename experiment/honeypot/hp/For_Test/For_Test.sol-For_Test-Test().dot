digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > constant

IRs:
TMP_3(bool) = msg.value > 100000000000000000
CONDITION TMP_3"];
1->2[label="True"];
1->15[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
multi = constant

IRs:
multi(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToTransfer = 0

IRs:
amountToTransfer(uint256) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->14;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
var = constant

IRs:
i(uint8) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
var < msg.value * constant

IRs:
TMP_4(uint256) = msg.value * 2
TMP_5(bool) = i < TMP_4
CONDITION TMP_5"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
var = var * constant

IRs:
TMP_6(uint8) = i * 2
multi(uint256) := TMP_6(uint8)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
multi < amountToTransfer

IRs:
TMP_7(bool) = multi < amountToTransfer
CONDITION TMP_7"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: BREAK 10
"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
amountToTransfer = var

IRs:
amountToTransfer(uint256) := multi(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_8(uint8) := i(uint8)
i(uint8) = i + 1"];
13->7;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
msg.sender.transfer(amountToTransfer)

IRs:
Transfer dest:msg.sender value:amountToTransfer"];
14->15;
15[label="Node Type: END_IF 15
"];
}
