digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
var = user input value 0

IRs:
REF_60 -> LENGTH _receivers
cnt(uint256) := REF_60(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
var = user input value 0 * user input value 1

IRs:
TMP_111 = CONVERT cnt to uint256
TMP_112(uint256) = TMP_111 * _value
amount(uint256) := TMP_112(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(user input value 0 > constant && user input value 0 <= constant)

IRs:
TMP_113(bool) = cnt > 0
TMP_114(bool) = cnt <= 20
TMP_115(bool) = TMP_113 && TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(user input value 0 > constant && user's property  >= calculated value using user input value 0)

IRs:
TMP_117(bool) = _value > 0
REF_61(uint256) -> balances[msg.sender]
TMP_118(bool) = REF_61 >= amount
TMP_119(bool) = TMP_117 && TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
4->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
var = constant

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
var < user input value 0

IRs:
TMP_122(bool) = i < cnt
CONDITION TMP_122"];
9->11[label="True"];


11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(user's address, user input address,user input value)

IRs:
REF_70(address) -> _receivers[i]
Emit Transfer(msg.sender.REF_70._value)"];

}
