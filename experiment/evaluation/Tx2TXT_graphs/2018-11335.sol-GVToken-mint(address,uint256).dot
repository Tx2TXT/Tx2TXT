digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == state variable)

IRs:
TMP_44(bool) = msg.sender == ico
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(user input value > 0)

IRs:
TMP_46(bool) = value > 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(state variable + user input value <= constant)

IRs:
TMP_48(uint256) = totalSupply + value
TMP_49(bool) = TMP_48 <= TOKEN_LIMIT
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
user spcicied balance += user input value

IRs:
REF_55(uint256) -> balances[holder]
REF_55(-> balances) = REF_55 + value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
state variable += user input value

IRs:
totalSupply(uint256) = totalSupply + value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(zero address,user input address,user input value)

IRs:
Emit Transfer(0.holder.value)"];
}
