digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(user input address 1 != 0x0)

IRs:
TMP_12(bool) = _to != 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(user spcicied balance >= user input value + constant)

IRs:
REF_12(uint256) -> balanceOf[_from]
TMP_14(uint256) = _value + burnPerTransaction
TMP_15(bool) = REF_12 >= TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(user spcicied balance + user input value > user spcicied balance)

IRs:
REF_13(uint256) -> balanceOf[_to]
TMP_17(uint256) = REF_13 + _value
REF_14(uint256) -> balanceOf[_to]
TMP_18(bool) = TMP_17 > REF_14
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
user spcicied balance -= user input value + constant

IRs:
REF_15(uint256) -> balanceOf[_from]
TMP_20(uint256) = _value + burnPerTransaction
REF_15(-> balanceOf) = REF_15 - TMP_20"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
user spcicied balance += user input value

IRs:
REF_16(uint256) -> balanceOf[_to]
REF_16(-> balanceOf) = REF_16 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balance of zero address += constant

IRs:
REF_17(uint256) -> balanceOf[0]
REF_17(-> balanceOf) = REF_17 + burnPerTransaction"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
state variable -= constant

IRs:
currentSupply(uint256) = currentSupply - burnPerTransaction"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Burn(user input address,constant)

IRs:
Emit Burn(_from.burnPerTransaction)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(user input address 0,user input address 1,user input value)

IRs:
Emit Transfer(_from._to._value)"];
}
